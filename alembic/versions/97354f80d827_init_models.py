"""Init models

Revision ID: 97354f80d827
Revises:
Create Date: 2025-05-05 18:48:20.547901

"""

from typing import Sequence, Union

import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

from alembic import op

# revision identifiers, used by Alembic.
revision: str = "97354f80d827"
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    sa.Enum(
        "MONDAY",
        "TUESDAY",
        "WEDNESDAY",
        "THURSDAY",
        "FRIDAY",
        "SATURDAY",
        "SUNDAY",
        name="weekday",
    ).create(op.get_bind())
    sa.Enum("CREDIT", "AUTO_CREDIT", name="attestation_type_enum").create(
        op.get_bind()
    )
    op.create_table(
        "attendance_requirements",
        sa.Column("id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column(
            "attestation_type",
            postgresql.ENUM(
                "CREDIT",
                "AUTO_CREDIT",
                name="attestation_type_enum",
                create_type=False,
            ),
            nullable=False,
        ),
        sa.Column("required_visits", sa.Integer(), nullable=False),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_attendance_requirements")),
    )
    op.create_table(
        "groups",
        sa.Column("id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column("name", sa.String(), nullable=False),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_groups")),
        sa.UniqueConstraint("name", name=op.f("uq_groups_name")),
    )
    op.create_table(
        "sections",
        sa.Column("id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column("name", sa.String(), nullable=False),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_sections")),
        sa.UniqueConstraint("name", name=op.f("uq_sections_name")),
    )
    op.create_table(
        "users",
        sa.Column("id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column("corporate_email", sa.String(), nullable=False),
        sa.Column("is_active", sa.Boolean(), nullable=False),
        sa.Column("hashed_password", sa.String(), nullable=False),
        sa.Column(
            "created_at",
            sa.TIMESTAMP(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_users")),
        sa.UniqueConstraint(
            "corporate_email", name=op.f("uq_users_corporate_email")
        ),
    )
    op.create_table(
        "students",
        sa.Column("user_id", sa.Integer(), nullable=False),
        sa.Column("first_name", sa.String(), nullable=False),
        sa.Column("last_name", sa.String(), nullable=False),
        sa.Column("middle_name", sa.String(), nullable=True),
        sa.Column("course", sa.Integer(), nullable=False),
        sa.Column("group_id", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(
            ["group_id"],
            ["groups.id"],
            name=op.f("fk_students_group_id_groups"),
        ),
        sa.ForeignKeyConstraint(
            ["user_id"], ["users.id"], name=op.f("fk_students_user_id_users")
        ),
        sa.PrimaryKeyConstraint("user_id", name=op.f("pk_students")),
        sa.UniqueConstraint("user_id", name=op.f("uq_students_user_id")),
    )
    op.create_table(
        "teachers",
        sa.Column("user_id", sa.Integer(), nullable=False),
        sa.Column("first_name", sa.String(), nullable=False),
        sa.Column("last_name", sa.String(), nullable=False),
        sa.Column("middle_name", sa.String(), nullable=True),
        sa.Column("position", sa.String(), nullable=False),
        sa.ForeignKeyConstraint(
            ["user_id"], ["users.id"], name=op.f("fk_teachers_user_id_users")
        ),
        sa.PrimaryKeyConstraint("user_id", name=op.f("pk_teachers")),
        sa.UniqueConstraint("user_id", name=op.f("uq_teachers_user_id")),
    )
    op.create_table(
        "attendances",
        sa.Column("id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column("student_id", sa.Integer(), nullable=False),
        sa.Column("teacher_id", sa.Integer(), nullable=False),
        sa.Column("section_id", sa.Integer(), nullable=False),
        sa.Column(
            "visit_time",
            sa.TIMESTAMP(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.ForeignKeyConstraint(
            ["section_id"],
            ["sections.id"],
            name=op.f("fk_attendances_section_id_sections"),
        ),
        sa.ForeignKeyConstraint(
            ["student_id"],
            ["students.user_id"],
            name=op.f("fk_attendances_student_id_students"),
            ondelete="CASCADE",
        ),
        sa.ForeignKeyConstraint(
            ["teacher_id"],
            ["teachers.user_id"],
            name=op.f("fk_attendances_teacher_id_teachers"),
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_attendances")),
    )
    op.create_index(
        op.f("ix_attendances_student_id"),
        "attendances",
        ["student_id"],
        unique=False,
    )
    op.create_table(
        "extra_attendances",
        sa.Column("id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column("student_id", sa.Integer(), nullable=False),
        sa.Column("description", sa.String(), nullable=False),
        sa.Column("event_date", sa.Date(), nullable=False),
        sa.Column("visits_count", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(
            ["student_id"],
            ["students.user_id"],
            name=op.f("fk_extra_attendances_student_id_students"),
            ondelete="CASCADE",
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_extra_attendances")),
    )
    op.create_table(
        "schedule",
        sa.Column("id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column("teacher_id", sa.Integer(), nullable=False),
        sa.Column("section_id", sa.Integer(), nullable=False),
        sa.Column(
            "time_start_in_minutes_since_midnight", sa.Integer(), nullable=False
        ),
        sa.Column(
            "time_end_in_minutes_since_midnight", sa.Integer(), nullable=False
        ),
        sa.Column(
            "weekday",
            postgresql.ENUM(
                "MONDAY",
                "TUESDAY",
                "WEDNESDAY",
                "THURSDAY",
                "FRIDAY",
                "SATURDAY",
                "SUNDAY",
                name="weekday",
                create_type=False,
            ),
            nullable=False,
        ),
        sa.CheckConstraint(
            "time_end_in_minutes_since_midnight > time_start_in_minutes_since_midnight",
            name=op.f("ck_schedule_check_time_end_after_start"),
        ),
        sa.CheckConstraint(
            "time_end_in_minutes_since_midnight BETWEEN 0 AND 1439",
            name=op.f("ck_schedule_check_valid_end_time"),
        ),
        sa.CheckConstraint(
            "time_start_in_minutes_since_midnight BETWEEN 0 AND 1439",
            name=op.f("ck_schedule_check_valid_start_time"),
        ),
        sa.ForeignKeyConstraint(
            ["section_id"],
            ["sections.id"],
            name=op.f("fk_schedule_section_id_sections"),
            onupdate="CASCADE",
            ondelete="CASCADE",
        ),
        sa.ForeignKeyConstraint(
            ["teacher_id"],
            ["teachers.user_id"],
            name=op.f("fk_schedule_teacher_id_teachers"),
            onupdate="CASCADE",
            ondelete="CASCADE",
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_schedule")),
    )
    op.create_table(
        "teacher_section",
        sa.Column("teacher_id", sa.Integer(), nullable=False),
        sa.Column("section_id", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(
            ["section_id"],
            ["sections.id"],
            name=op.f("fk_teacher_section_section_id_sections"),
        ),
        sa.ForeignKeyConstraint(
            ["teacher_id"],
            ["teachers.user_id"],
            name=op.f("fk_teacher_section_teacher_id_teachers"),
        ),
        sa.PrimaryKeyConstraint(
            "teacher_id", "section_id", name=op.f("pk_teacher_section")
        ),
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table("teacher_section")
    op.drop_table("schedule")
    op.drop_table("extra_attendances")
    op.drop_index(op.f("ix_attendances_student_id"), table_name="attendances")
    op.drop_table("attendances")
    op.drop_table("teachers")
    op.drop_table("students")
    op.drop_table("users")
    op.drop_table("sections")
    op.drop_table("groups")
    op.drop_table("attendance_requirements")
    sa.Enum("CREDIT", "AUTO_CREDIT", name="attestation_type_enum").drop(
        op.get_bind()
    )
    sa.Enum(
        "MONDAY",
        "TUESDAY",
        "WEDNESDAY",
        "THURSDAY",
        "FRIDAY",
        "SATURDAY",
        "SUNDAY",
        name="weekday",
    ).drop(op.get_bind())
    # ### end Alembic commands ###
